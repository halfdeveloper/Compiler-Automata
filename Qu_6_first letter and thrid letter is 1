#include <stdio.h>
#include <string.h>
typedef struct DFA
{
    int noState;
    int noOfInput;
    int noFinalState;
    int initialState;
    int transition[10][10];
    int finalState[10];
    char inputSymbols[10];
} DFA;
int validString(char ch, DFA d)
{
    for (int i = 0; i < d.noOfInput; i++)
    {
        if (ch == d.inputSymbols[i])
        {
            return i;
        }
    }
    return -1;
}
int checkFinalState(int st, DFA d)
{
    for (int i = 0; i < d.noFinalState; i++)
    {
        if (st == d.finalState[i])
        {
            return 1;
        }
    }
    return 0;
}
int main()
{
    DFA d;
    int check = 1;

    printf("\nEnter no of states: ");
    scanf(" %d", &d.noState);
    printf("\nenter initialState\n");
    scanf("%d", &d.initialState);
    printf("\nEnter no of final states: ");
    scanf(" %d", &d.noFinalState);
    printf("\nEnter no of input symbols: ");
    scanf(" %d", &d.noOfInput);

    // accept the input symbols
    for (int i = 0; i < d.noOfInput; i++)
    {
        printf("Enter input symbol no %d : ", i + 1);
        scanf(" %c", &d.inputSymbols[i]);
    }
    // accept the final states
    for (int i = 0; i < d.noFinalState; i++)
    {
        printf("Enter final state no %d : ", i + 1);
        scanf(" %d", &d.finalState[i]);
    }
    printf("\nEnter transitions: ");

    for (int i = 0; i < d.noState; i++)
    {
        for (int j = 0; j < d.noOfInput; j++)
        {
            printf("\nd(q%d,%c) : ", i, d.inputSymbols[j]);
            scanf(" %d", &d.transition[i][j]);
        }
    }
    // print the transition table
    // print the symbols as columns of transition table
    for (int i = 0; i < d.noOfInput; i++)
        printf("\t %c", d.inputSymbols[i]);
    printf("\n");
    for (int i = 0; i < d.noState; i++)
    {
        printf("\nq%d", i);
        for (int j = 0; j < d.noOfInput; j++)
        {
            printf("\t%d", d.transition[i][j]);
        }
        printf("\n");
    }
    do
    {
        char string[10];
        printf("\nEnter a string: ");
        scanf("%s", string);
        int stateCounter = d.initialState;
        int flag = 1;
        for (int i = 0; i < strlen(string); i++)
        {
            int symPos = validString(string[i], d);
            if (symPos == -1)
            {
                flag = 0;
                break;
            }
            stateCounter = d.transition[stateCounter][symPos];
        }
        if (flag == 1 && checkFinalState(stateCounter, d) == 1)
        {
            printf("%s is accepted. ", string);
        }
        else
        {
            printf("%s is not accpeted. ", string);
        }
        printf("\nwant to check again\npress 1 else press 0\n");
        scanf("%d", &check);
    } while (check);

    return 0;
}
/*

Enter no of states: 6

enter initialState
0

Enter no of final states: 1

Enter no of input symbols: 2
Enter input symbol no 1 : 0
Enter input symbol no 2 : 1
Enter final state no 1 : 4

Enter transitions:
d(q0,0) : 5

d(q0,1) : 1

d(q1,0) : 2

d(q1,1) : 2

d(q2,0) : 5

d(q2,1) : 3

d(q3,0) : 4

d(q3,1) : 4

d(q4,0) : 4

d(q4,1) : 4

d(q5,0) : 5

d(q5,1) : 5
         0       1

q0      5       1

q1      2       2

q2      5       3

q3      4       4

q4      4       4

q5      5       5

Enter a string: 101
101 is not accpeted.
want to check again
press 1 else press 0
1

Enter a string: 1010
1010 is accepted.
want to check again
press 1 else press 0
1

Enter a string: 11100
11100 is accepted.
want to check again
press 1 else press 0
1

Enter a string: 11000
11000 is not accpeted.
want to check again
press 1 else press 0
*/
